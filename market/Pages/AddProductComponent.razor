@page "/addproduct"
@using UseCases.UseCaseInterfaces;
@using UseCases;
@inject NavigationManager NavigationManager
@inject IAddProductUseCase AddProductUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
<h3>Add Product</h3>

@if(product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="category">Category</label>
            <select id="category" @bind="product.CategoryId">
                <option value="0"></option>
                @foreach(var cat in categories)
                {
                    <option value="@cat.CategoryId">@cat.Name</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="name">Description</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="name">Description</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

       


        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}
@code {


    private Product product;
    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        product = new Product();
        categories = ViewCategoriesUseCase.Execute();
    }
    private void OnValidSubmit()
    {
        AddProductUseCase.Execute(product);
        NavigationManager.NavigateTo("/products");
    }
}
