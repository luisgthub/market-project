@using UseCases.UseCaseInterfaces;
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@if(productToSell != null) {   
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <input id="name" readonly value="@productToSell.Name" class="form-control"/>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input id="price" readonly value="@(string.Format("{0:c}",productToSell.Price))" class="form-control"/>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>


  
}

@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            productToSell = new Product
                {
                    ProductId = SelectedProduct.ProductId,
                    Name = SelectedProduct.Name,
                    CategoryId = SelectedProduct.CategoryId,
                    Price = SelectedProduct.Price,
                    Quantity = 0
                };
        }
    }
    public void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "Quantidade menor que a disponivel no estoque";
        } else if(product.Quantity >= productToSell.Quantity) {
            OnProductSold.InvokeAsync(productToSell);
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity);
        } else
        {
            errorMessage = $"{product.Name} tem apenas {product.Quantity} unidades restantes.";
        }
    }
}
